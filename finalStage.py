from telegram import InputMediaPhoto, Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
import sqlite3
import asyncio

# –°—Ç–∞–¥—ñ—ó –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó
DATE_START, DATE_END, GUESTS, ROOM_TYPE = range(4)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
app = ApplicationBuilder().token("—Ç—É—Ç –≤–∞—à —Ç–æ–∫–µ–Ω").build()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def setup_database():
    connection = sqlite3.connect("bot_database.db")
    cursor = connection.cursor()

    # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL,
        chat_id INTEGER NOT NULL UNIQUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    connection.commit()
    connection.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞.")

# –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def add_user(username, chat_id):
    connection = sqlite3.connect("bot_database.db")
    cursor = connection.cursor()
    try:
        cursor.execute("""
        INSERT OR IGNORE INTO users (username, chat_id)
        VALUES (?, ?)
        """, (username, chat_id))
        connection.commit()
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.")
    except sqlite3.Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    finally:
        connection.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
def get_all_users():
    connection = sqlite3.connect("bot_database.db")
    cursor = connection.cursor()
    cursor.execute("SELECT chat_id FROM users")
    users = cursor.fetchall()
    connection.close()
    return [user[0] for user in users]

# –ö–æ–º–∞–Ω–¥–∞ /start —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def start_command(update, context):
    username = update.effective_user.username or "NoUsername"
    chat_id = update.effective_user.id

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    add_user(username, chat_id)

    inline_keyboard = [
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="book")],
        [InlineKeyboardButton("–£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [InlineKeyboardButton("–ù–∞—à —Å–∞–π—Ç", url="https://example.com")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ç–µ–ª—å 'Dream Stay'! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –§—É–Ω–∫—Ü—ñ—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
async def broadcast_message(update, context):
    if not context.args:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ü—Ä–∏–∫–ª–∞–¥: `/broadcast –î–æ–±—Ä–æ–≥–æ –¥–Ω—è, —Ü–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.`")
        return

    message_text = " ".join(context.args)
    users = get_all_users()

    successful = 0
    failed = 0

    for chat_id in users:
        try:
            await context.bot.send_message(chat_id=chat_id, text=message_text)
            successful += 1
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")
            failed += 1
        await asyncio.sleep(0.1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è API

    await update.message.reply_text(f"üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {successful}, –Ω–µ –≤–¥–∞–ª–æ—Å—è: {failed}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "book":
        await query.message.reply_text(
            "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-01):"
        )
        return DATE_START
    elif query.data == "services":
        await query.message.reply_text(
            "–£ –Ω–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n"
            "- –ó–∞–≤—Ç—Ä–∞–∫–∏\n"
            "- –ë–∞—Å—Å–µ–π–Ω –∏ SPA\n"
            "- –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑/–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç"
        )
        return ConversationHandler.END

    elif query.data == "contacts":
        await query.message.reply_text(
            "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            "- –¢–µ–ª–µ—Ñ–æ–Ω: +123456789\n"
            "- –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: contact@dreamstay.com\n"
            "- –ê–¥—Ä–µ—Å: —É–ª. –ú–∏—Ä–∞, 10, –ö–∏–µ–≤"
        )
        return ConversationHandler.END


# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
async def send_photos(update, context):
    photo_paths = ["photos/pic1.jpg", "photos/pic2.jpg", "photos/pic3.jpg"]
    try:
        media_group = [InputMediaPhoto(open(photo, "rb")) for photo in photo_paths]
        await update.message.reply_media_group(media_group)
    except FileNotFoundError as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª {e.filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
setup_database()

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥ —ñ –¥—ñ–π
app.add_handler(CommandHandler("start", start_command))
app.add_handler(CommandHandler("sendphotos", send_photos))
app.add_handler(CommandHandler("broadcast", broadcast_message))

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å—ñ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
booking_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_handler, pattern="^(book, services, contacts)$")],
    states={
        DATE_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_start)],
        DATE_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_end)],
        GUESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, guests)],
        ROOM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, room_type)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)
app.add_handler(booking_handler)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app.run_polling()
